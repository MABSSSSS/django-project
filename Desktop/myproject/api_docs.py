# Importing the schema view generator from drf_yasg for generating API documentation
from drf_yasg.views import get_schema_view

# Importing the openapi module from drf_yasg to define API metadata such as title, description, and contact information
from drf_yasg import openapi

# Importing permissions from the Django REST framework to handle access control for the API documentation
from rest_framework import permissions

def get_api_info():
    """
    Generate the API metadata for the documentation.

    This function creates an instance of `openapi.Info`, which contains all the metadata 
    about the API, such as the title, version, description, terms of service, contact information,
    and license. This information will be displayed in the API documentation interface.

    :return: An openapi.Info object containing the API metadata.
    """
    return openapi.Info(
        title="My Project API",  # Title of the API documentation
        default_version='v1',  # Version of the API
        description="This is the API documentation for My Project. It provides detailed information about the available endpoints and their usage.",  # A brief description of the API
        terms_of_service="https://www.google.com/policies/terms/",  # Link to the terms of service
        contact=openapi.Contact(email="contact@myproject.local"),  # Contact email for the API
        license=openapi.License(name="BSD License"),  # License information for the API
    )

def get_schema(permission_classes=(permissions.AllowAny,)):
    """
    Generate the schema view for the API documentation.

    This function returns a `get_schema_view` instance configured with the provided
    permission classes and the API metadata generated by `get_api_info()`. The schema view 
    is responsible for generating and serving the API documentation in formats like Swagger and Redoc.

    :param permission_classes: A tuple of permission classes that determine who can access the API documentation.
    :return: A schema view that can be used in Django URL patterns to serve API documentation.
    """
    return get_schema_view(
        get_api_info(),  # API metadata for the documentation
        public=True,  # Indicates whether the schema is public (accessible without authentication)
        permission_classes=permission_classes,  # Permissions required to view the API documentation
    )

# Generate the schema view with the default permission (AllowAny)
schema_view = get_schema()
